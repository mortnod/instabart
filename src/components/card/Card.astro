---
interface Props {
  title: string;
  href: string;
  id?: string;
}

const { title, ...rest } = Astro.props;
---

<li
  class="card bg:slate group relative block w-full overflow-hidden bg-[#bbba] pb-[100%] shadow-card duration-150 ease-in-out hover:shadow-card-hover dark:bg-[#5A697E80] [&:has(:focus-visible)]:shadow-card-ring"
>
  <div
    class="absolute bottom-px left-px right-px top-px bg-gray-50 duration-150 ease-in-out hover:bg-white/80 dark:bg-slate-800 dark:hover:bg-[#17243980]"
  >
    <a
      {...rest}
      rel="noreferrer noopener"
      class="relative flex h-full w-full flex-col items-center px-3 py-3 text-center no-underline outline-none sm:px-5 sm:py-5 md:py-8"
    >
      <span
        class="mb-[3vw] mt-[3vw] text-[5.2vw] font-bold tracking-wide text-gray-800 group-hover:text-gray-900 sm:mb-[2vw] sm:mt-[1vw] sm:text-[3.6vw] md:mb-3 md:mt-0 md:text-[22px] dark:text-white dark:group-hover:text-white"
      >
        {title}
      </span>
      <div
        class="flex justify-center text-gray-800 dark:text-blue-200 dark:group-hover:text-blue-200"
      >
        <slot />
      </div>
    </a>
  </div>

  <!-- Spotlight -->
  <div
    class="spotlight absolute left-0 top-0 -z-10 h-60 w-60 rounded-full bg-gray-900/45 opacity-0 blur-2xl dark:bg-blue-200/50"
  >
  </div>

  <!-- Fake spotlight -->
  <div
    class="fake-spotlight absolute left-0 top-0 -z-10 h-48 w-48 rounded-full"
  >
  </div>
</li>

<script>
  const setupHoverEffect = () => {
    // Spotlight hover effect
    // Credit: https://dev.to/yxsh/cards-mouse-hover-effect-with-css-js-33j0
    const allCards = document.querySelectorAll('.card');

    window.addEventListener('mousemove', (ev) => {
      allCards.forEach((e) => {
        const spotlight = e.querySelector('.spotlight');
        const fakeSpotlight = e.querySelector('.fake-spotlight');

        if (!spotlight || !fakeSpotlight) {
          return;
        }

        const rec = fakeSpotlight.getBoundingClientRect();

        spotlight.animate(
          [
            {
              transform: `translate(${
                ev.clientX - rec.left - rec.width / 2
              }px,${ev.clientY - rec.top - rec.height / 2}px)`,
              opacity: '1',
            },
          ],
          {
            duration: 300,
            fill: 'forwards',
          },
        );
      });
    });
  };

  const configureLinkBehaviour = () => {
    const isPwa = window.matchMedia('(display-mode: standalone)').matches;

    if (isPwa) {
      const allLinks = document.querySelectorAll('.card a');
      allLinks.forEach((link) => {
        link.setAttribute('target', '_blank');
      });
    }
  };

  setupHoverEffect();
  configureLinkBehaviour();
</script>
